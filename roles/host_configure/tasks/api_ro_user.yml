---
- name: Check API RO User
  shell: pveum user list | grep "{{ api_ro_user_id }}"
  register: api_ro_user_exists
  ignore_errors: true
  changed_when: false

- name: Create API RO Group
  command: pveum group add "{{ api_ro_user_id }}"-group
  when: api_ro_user_exists.rc == 1

- name: Create API RO User
  command: pveum user add "{{ api_ro_user_id }}"@pve -comment 'API User for RO access' --password "{{ api_ro_password }}" --groups "{{ api_ro_user_id }}-group"
  when: api_ro_user_exists.rc == 1

- name: Create API RO Token
  command: pveum user token add "{{ api_ro_user_id }}"@pve "{{ api_ro_user_id }}"-token -comment 'API RO User Token' -privsep 1
  register: api_ro_token_out
  when: api_ro_user_exists.rc == 1
  notify: Print api_ro_user token value

- name: Add PVEAuditor Role to User
  command: pveum acl modify / --groups "{{ api_ro_user_id }}-group" --roles PVEAuditor --propagate 1
  when: api_ro_user_exists.rc == 1

- name: Add PVEAuditor Role to Group
  command: pveum acl modify / --users "{{ api_ro_user_id }}@pve" --roles PVEAuditor --propagate 1
  when: api_ro_user_exists.rc == 1

- name: Add PVEAuditor Role to API Token
  command: pveum acl modify / --tokens '{{ api_ro_user_id }}@pve!{{ api_ro_user_id }}-token' --roles PVEAuditor --propagate 1
  when: api_ro_user_exists.rc == 1